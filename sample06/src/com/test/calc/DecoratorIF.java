/*
 * Copyleft (c) 2022. Test codes written by miriet.
 * 많이 보고, 많이 만들고, 많이 디버깅하자!!!
 */

package com.test.calc;
/*
*   인터페이스는 class 와 달리 인스턴스를 생성하지 않는다. 즉, 구체적인 코드 덩어리가 메모리에 올라가거나 하지 않는다.
*   인터페이스는 이 인터페이스를 구현(Realization, implements)하는 클래스에 꼭 작성해야 하는 메소드의 이름과 속성을 정의해서
*   해당 인터페이스를 구현하는 모든 하위 클래스가 필수적으로 가져야 할 요소들을 강제로 지키게 한다.
*   강제로 정의된 메소드는 인터페이스 타입으로 추상화된 형태로 선언하여, 실제 구현체가 필요할 때 생성해서 인터페이스에 정의된 메소드 들을
*   이용하여 세부 작업을 진행한다.
*
*   인터페이스(또는 추상클래스)를 사용하는 것은 객체 구조의 추상화를 통해 특정 클래스와 인터페이스 구현 클래스들의 결합도를 낮춰주고
*   확장성을 높여줄 수 있다.
*
*   인터페이스는 메모리에 올라가지 않는 대신 컴파일 타임에 컴파일러가 여러가지 제약사항을 체크하게 되며, 자바의 기본 인터페이스를
*   구현한 경우에는 runtime 시에 vm 에서 해당 인터페이스의 구현 여부를 체크하여 별도의 작업을 수행하기도 한다.
*
* */
public interface DecoratorIF {
    String getTitle(int param);

    String getContent(int param);
}
